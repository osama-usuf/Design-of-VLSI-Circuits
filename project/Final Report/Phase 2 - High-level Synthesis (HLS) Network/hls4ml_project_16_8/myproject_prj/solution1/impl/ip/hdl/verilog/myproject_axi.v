// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_axi,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.326000,HLS_SYN_LAT=364,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1231,HLS_SYN_FF=180023,HLS_SYN_LUT=107162,HLS_VERSION=2019_1}" *)

module myproject_axi (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_pp0_stage0 = 21'd2;
parameter    ap_ST_fsm_state9 = 21'd4;
parameter    ap_ST_fsm_state10 = 21'd8;
parameter    ap_ST_fsm_state11 = 21'd16;
parameter    ap_ST_fsm_state12 = 21'd32;
parameter    ap_ST_fsm_state13 = 21'd64;
parameter    ap_ST_fsm_state14 = 21'd128;
parameter    ap_ST_fsm_state15 = 21'd256;
parameter    ap_ST_fsm_state16 = 21'd512;
parameter    ap_ST_fsm_state17 = 21'd1024;
parameter    ap_ST_fsm_state18 = 21'd2048;
parameter    ap_ST_fsm_state19 = 21'd4096;
parameter    ap_ST_fsm_state20 = 21'd8192;
parameter    ap_ST_fsm_state21 = 21'd16384;
parameter    ap_ST_fsm_state22 = 21'd32768;
parameter    ap_ST_fsm_state23 = 21'd65536;
parameter    ap_ST_fsm_state24 = 21'd131072;
parameter    ap_ST_fsm_state25 = 21'd262144;
parameter    ap_ST_fsm_pp1_stage0 = 21'd524288;
parameter    ap_ST_fsm_state33 = 21'd1048576;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] in_data_0_data_out;
wire    in_data_0_vld_in;
wire    in_data_0_vld_out;
wire    in_data_0_ack_in;
reg    in_data_0_ack_out;
reg   [31:0] in_data_0_payload_A;
reg   [31:0] in_data_0_payload_B;
reg    in_data_0_sel_rd;
reg    in_data_0_sel_wr;
wire    in_data_0_sel;
wire    in_data_0_load_A;
wire    in_data_0_load_B;
reg   [1:0] in_data_0_state;
wire    in_data_0_state_cmp_full;
reg   [0:0] in_last_V_0_data_out;
wire    in_last_V_0_vld_in;
wire    in_last_V_0_vld_out;
wire    in_last_V_0_ack_in;
reg    in_last_V_0_ack_out;
reg   [0:0] in_last_V_0_payload_A;
reg   [0:0] in_last_V_0_payload_B;
reg    in_last_V_0_sel_rd;
reg    in_last_V_0_sel_wr;
wire    in_last_V_0_sel;
wire    in_last_V_0_load_A;
wire    in_last_V_0_load_B;
reg   [1:0] in_last_V_0_state;
wire    in_last_V_0_state_cmp_full;
reg   [31:0] out_data_1_data_out;
reg    out_data_1_vld_in;
wire    out_data_1_vld_out;
wire    out_data_1_ack_in;
wire    out_data_1_ack_out;
reg   [31:0] out_data_1_payload_A;
reg   [31:0] out_data_1_payload_B;
reg    out_data_1_sel_rd;
reg    out_data_1_sel_wr;
wire    out_data_1_sel;
wire    out_data_1_load_A;
wire    out_data_1_load_B;
reg   [1:0] out_data_1_state;
wire    out_data_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
reg    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln19_fu_237_p2;
reg    out_r_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter5;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln27_reg_1245;
reg   [0:0] icmp_ln27_reg_1245_pp1_iter4_reg;
reg    ap_enable_reg_pp1_iter6;
reg   [0:0] icmp_ln27_reg_1245_pp1_iter5_reg;
reg   [0:0] is_last_0_reg_194;
reg   [8:0] i_0_reg_206;
reg   [8:0] i_0_reg_206_pp0_iter1_reg;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] i_0_reg_206_pp0_iter2_reg;
reg   [3:0] i2_0_reg_218;
reg   [0:0] icmp_ln19_reg_1047;
reg   [0:0] icmp_ln19_reg_1047_pp0_iter1_reg;
reg   [0:0] icmp_ln19_reg_1047_pp0_iter2_reg;
reg   [0:0] icmp_ln19_reg_1047_pp0_iter3_reg;
reg   [0:0] icmp_ln19_reg_1047_pp0_iter4_reg;
reg   [0:0] icmp_ln19_reg_1047_pp0_iter5_reg;
wire   [8:0] i_fu_243_p2;
reg   [8:0] i_reg_1051;
reg   [31:0] in_data_tmp_reg_1056;
reg   [31:0] in_data_tmp_reg_1056_pp0_iter1_reg;
reg   [31:0] in_data_tmp_reg_1056_pp0_iter2_reg;
wire   [0:0] is_last_fu_258_p2;
reg   [0:0] is_last_reg_1062;
wire   [62:0] trunc_ln556_fu_268_p1;
reg   [62:0] trunc_ln556_reg_1067;
reg   [0:0] p_Result_8_reg_1072;
reg   [0:0] p_Result_8_reg_1072_pp0_iter2_reg;
reg   [10:0] exp_tmp_V_reg_1077;
wire   [51:0] trunc_ln565_fu_290_p1;
reg   [51:0] trunc_ln565_reg_1082;
reg   [51:0] trunc_ln565_reg_1082_pp0_iter2_reg;
wire   [0:0] icmp_ln571_fu_297_p2;
reg   [0:0] icmp_ln571_reg_1087;
wire   [0:0] icmp_ln581_fu_308_p2;
reg   [0:0] icmp_ln581_reg_1093;
wire  signed [11:0] sh_amt_fu_326_p3;
reg  signed [11:0] sh_amt_reg_1099;
reg  signed [11:0] sh_amt_reg_1099_pp0_iter3_reg;
wire   [0:0] icmp_ln582_fu_334_p2;
reg   [0:0] icmp_ln582_reg_1105;
reg   [7:0] tmp_4_reg_1111;
wire   [53:0] man_V_2_fu_367_p3;
reg   [53:0] man_V_2_reg_1116;
wire   [15:0] trunc_ln583_fu_374_p1;
reg   [15:0] trunc_ln583_reg_1121;
wire   [0:0] and_ln603_fu_461_p2;
reg   [0:0] and_ln603_reg_1126;
wire   [0:0] or_ln603_fu_467_p2;
reg   [0:0] or_ln603_reg_1131;
wire   [15:0] select_ln603_1_fu_473_p3;
reg   [15:0] select_ln603_1_reg_1136;
wire   [0:0] or_ln603_2_fu_487_p2;
reg   [0:0] or_ln603_2_reg_1141;
wire   [12:0] shl_ln_fu_493_p3;
reg   [12:0] shl_ln_reg_1146;
reg   [12:0] shl_ln_reg_1146_pp0_iter4_reg;
wire   [15:0] select_ln603_3_fu_539_p3;
reg   [15:0] select_ln603_3_reg_1156;
wire   [12:0] empty_34_fu_546_p2;
reg   [12:0] empty_34_reg_1161;
wire   [0:0] icmp_ln203_fu_551_p2;
reg   [0:0] icmp_ln203_reg_1166;
reg   [0:0] icmp_ln203_reg_1166_pp0_iter5_reg;
wire   [12:0] sub_ln203_fu_556_p2;
reg   [12:0] sub_ln203_reg_1173;
wire   [12:0] sub_ln203_1_fu_568_p2;
reg   [12:0] sub_ln203_1_reg_1178;
wire   [5183:0] shl_ln203_fu_598_p2;
reg   [5183:0] shl_ln203_reg_1183;
wire   [5183:0] and_ln203_fu_616_p2;
reg   [5183:0] and_ln203_reg_1189;
reg   [15:0] out_local_reg_1195;
wire    ap_CS_fsm_state25;
reg   [15:0] out_local_1_reg_1200;
reg   [15:0] out_local_2_reg_1205;
reg   [15:0] out_local_3_reg_1210;
reg   [15:0] out_local_4_reg_1215;
reg   [15:0] out_local_5_reg_1220;
reg   [15:0] out_local_6_reg_1225;
reg   [15:0] out_local_7_reg_1230;
reg   [15:0] out_local_8_reg_1235;
reg   [15:0] out_local_9_reg_1240;
wire   [0:0] icmp_ln27_fu_707_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state26_pp1_stage0_iter0;
wire    ap_block_state27_pp1_stage0_iter1;
wire    ap_block_state28_pp1_stage0_iter2;
wire    ap_block_state29_pp1_stage0_iter3;
wire    ap_block_state30_pp1_stage0_iter4;
wire    ap_block_state31_pp1_stage0_iter5;
reg    ap_block_state31_io;
wire    ap_block_state32_pp1_stage0_iter6;
reg    ap_block_state32_io;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln27_reg_1245_pp1_iter1_reg;
reg   [0:0] icmp_ln27_reg_1245_pp1_iter2_reg;
reg   [0:0] icmp_ln27_reg_1245_pp1_iter3_reg;
wire   [3:0] i_1_fu_713_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] tmp_V_3_fu_719_p12;
reg   [15:0] tmp_V_3_reg_1254;
reg   [0:0] p_Result_10_reg_1260;
reg   [0:0] p_Result_10_reg_1260_pp1_iter1_reg;
reg   [0:0] p_Result_10_reg_1260_pp1_iter2_reg;
reg   [0:0] p_Result_10_reg_1260_pp1_iter3_reg;
reg   [0:0] p_Result_10_reg_1260_pp1_iter4_reg;
wire   [15:0] tmp_V_fu_743_p2;
reg   [15:0] tmp_V_reg_1266;
wire   [0:0] and_ln30_fu_755_p2;
reg   [0:0] and_ln30_reg_1271;
reg   [0:0] and_ln30_reg_1271_pp1_iter1_reg;
reg   [0:0] and_ln30_reg_1271_pp1_iter2_reg;
reg   [0:0] and_ln30_reg_1271_pp1_iter3_reg;
reg   [0:0] and_ln30_reg_1271_pp1_iter4_reg;
wire   [0:0] icmp_ln935_fu_761_p2;
reg   [0:0] icmp_ln935_reg_1276;
reg   [0:0] icmp_ln935_reg_1276_pp1_iter2_reg;
reg   [0:0] icmp_ln935_reg_1276_pp1_iter3_reg;
reg   [0:0] icmp_ln935_reg_1276_pp1_iter4_reg;
wire   [15:0] tmp_V_4_fu_766_p3;
reg   [15:0] tmp_V_4_reg_1281;
reg   [15:0] tmp_V_4_reg_1281_pp1_iter2_reg;
reg   [15:0] tmp_V_4_reg_1281_pp1_iter3_reg;
reg   [31:0] l_fu_789_p3;
reg   [31:0] l_reg_1289;
wire   [7:0] trunc_ln943_fu_797_p1;
reg   [7:0] trunc_ln943_reg_1294;
reg   [7:0] trunc_ln943_reg_1294_pp1_iter2_reg;
reg   [7:0] trunc_ln943_reg_1294_pp1_iter3_reg;
reg   [7:0] trunc_ln943_reg_1294_pp1_iter4_reg;
wire   [31:0] sub_ln944_fu_801_p2;
reg   [31:0] sub_ln944_reg_1299;
wire   [15:0] trunc_ln944_fu_806_p1;
reg   [15:0] trunc_ln944_reg_1306;
wire   [4:0] trunc_ln947_fu_810_p1;
reg   [4:0] trunc_ln947_reg_1311;
wire   [31:0] lsb_index_fu_814_p2;
reg   [31:0] lsb_index_reg_1316;
wire   [0:0] icmp_ln947_fu_829_p2;
reg   [0:0] icmp_ln947_reg_1321;
wire   [0:0] icmp_ln947_1_fu_855_p2;
reg   [0:0] icmp_ln947_1_reg_1326;
wire   [15:0] add_ln949_fu_861_p2;
reg   [15:0] add_ln949_reg_1331;
wire   [0:0] icmp_ln958_fu_866_p2;
reg   [0:0] icmp_ln958_reg_1336;
wire   [31:0] add_ln958_fu_872_p2;
reg   [31:0] add_ln958_reg_1341;
wire   [31:0] sub_ln958_fu_877_p2;
reg   [31:0] sub_ln958_reg_1346;
reg   [62:0] m_5_reg_1351;
reg   [0:0] tmp_10_reg_1356;
wire   [31:0] select_ln935_fu_1032_p3;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state26;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
wire    grp_myproject_fu_229_ap_start;
wire    grp_myproject_fu_229_ap_done;
wire    grp_myproject_fu_229_ap_idle;
wire    grp_myproject_fu_229_ap_ready;
wire   [15:0] grp_myproject_fu_229_ap_return_0;
wire   [15:0] grp_myproject_fu_229_ap_return_1;
wire   [15:0] grp_myproject_fu_229_ap_return_2;
wire   [15:0] grp_myproject_fu_229_ap_return_3;
wire   [15:0] grp_myproject_fu_229_ap_return_4;
wire   [15:0] grp_myproject_fu_229_ap_return_5;
wire   [15:0] grp_myproject_fu_229_ap_return_6;
wire   [15:0] grp_myproject_fu_229_ap_return_7;
wire   [15:0] grp_myproject_fu_229_ap_return_8;
wire   [15:0] grp_myproject_fu_229_ap_return_9;
wire    grp_myproject_fu_229_input1_V_blk_n;
reg   [0:0] ap_phi_mux_is_last_0_phi_fu_198_p4;
reg   [8:0] ap_phi_mux_i_0_phi_fu_210_p4;
reg    grp_myproject_fu_229_ap_start_reg;
reg   [20:0] ap_NS_fsm;
wire    ap_NS_fsm_state9;
reg   [5183:0] in_local_V_fu_172;
wire    ap_CS_fsm_state9;
wire   [5183:0] in_local_V_1_fu_656_p2;
wire    ap_block_pp1_stage0_01001;
wire   [63:0] grp_fu_234_p1;
wire   [63:0] ireg_V_fu_264_p1;
wire   [11:0] zext_ln461_fu_294_p1;
wire   [11:0] F2_fu_302_p2;
wire   [11:0] add_ln581_fu_314_p2;
wire   [11:0] sub_ln581_fu_320_p2;
wire   [52:0] tmp_s_fu_350_p3;
wire   [53:0] p_Result_9_fu_357_p1;
wire   [53:0] man_V_1_fu_361_p2;
wire   [31:0] bitcast_ln696_fu_388_p1;
wire   [0:0] tmp_5_fu_391_p3;
wire   [0:0] xor_ln571_fu_407_p2;
wire   [0:0] or_ln582_fu_417_p2;
wire   [0:0] xor_ln582_fu_421_p2;
wire   [0:0] icmp_ln585_fu_378_p2;
wire   [0:0] and_ln581_fu_427_p2;
wire   [0:0] xor_ln585_fu_432_p2;
wire   [0:0] or_ln581_fu_450_p2;
wire   [0:0] icmp_ln603_fu_383_p2;
wire   [0:0] xor_ln581_fu_455_p2;
wire   [0:0] and_ln585_1_fu_444_p2;
wire   [0:0] and_ln585_fu_438_p2;
wire   [15:0] select_ln588_fu_399_p3;
wire   [0:0] and_ln582_fu_412_p2;
wire   [0:0] or_ln603_1_fu_481_p2;
wire  signed [31:0] sext_ln581_fu_501_p1;
wire   [53:0] zext_ln586_fu_504_p1;
wire   [53:0] ashr_ln586_fu_508_p2;
wire   [15:0] sext_ln581cast_fu_517_p1;
wire   [15:0] shl_ln604_fu_521_p2;
wire   [15:0] trunc_ln586_fu_513_p1;
wire   [15:0] select_ln603_fu_526_p3;
wire   [15:0] select_ln603_2_fu_533_p3;
wire   [12:0] select_ln203_fu_561_p3;
wire   [12:0] select_ln203_2_fu_582_p3;
wire   [12:0] select_ln203_1_fu_577_p3;
wire   [5183:0] zext_ln203_fu_574_p1;
wire   [5183:0] zext_ln203_1_fu_587_p1;
wire   [5183:0] zext_ln203_2_fu_591_p1;
wire   [5183:0] zext_ln203_3_fu_595_p1;
wire   [5183:0] shl_ln203_1_fu_604_p2;
wire   [5183:0] lshr_ln203_fu_610_p2;
reg   [5183:0] tmp_6_fu_625_p4;
wire   [5183:0] xor_ln203_fu_640_p2;
wire   [5183:0] select_ln203_3_fu_634_p3;
wire   [5183:0] and_ln203_1_fu_645_p2;
wire   [5183:0] and_ln203_2_fu_651_p2;
wire   [0:0] icmp_ln30_fu_749_p2;
reg   [15:0] p_Result_s_fu_771_p4;
wire   [31:0] p_Result_11_fu_781_p3;
wire   [30:0] tmp_8_fu_819_p4;
wire   [4:0] sub_ln947_fu_835_p2;
wire   [15:0] zext_ln947_fu_840_p1;
wire   [15:0] lshr_ln947_fu_844_p2;
wire   [15:0] p_Result_6_fu_850_p2;
wire   [0:0] tmp_9_fu_886_p3;
wire   [0:0] p_Result_5_fu_899_p3;
wire   [0:0] xor_ln949_fu_893_p2;
wire   [0:0] and_ln949_fu_905_p2;
wire   [0:0] a_fu_882_p2;
wire   [0:0] or_ln949_fu_911_p2;
wire   [31:0] zext_ln957_1_fu_928_p1;
wire   [31:0] lshr_ln958_fu_931_p2;
wire   [63:0] m_fu_925_p1;
wire   [63:0] zext_ln958_1_fu_940_p1;
wire   [63:0] zext_ln958_fu_936_p1;
wire   [63:0] shl_ln958_fu_943_p2;
wire   [31:0] or_ln_fu_917_p3;
wire   [63:0] m_1_fu_949_p3;
wire   [63:0] zext_ln961_fu_956_p1;
wire   [63:0] m_2_fu_960_p2;
wire   [7:0] select_ln964_fu_987_p3;
wire   [7:0] sub_ln964_fu_994_p2;
wire   [7:0] add_ln964_fu_999_p2;
wire   [63:0] m_6_fu_984_p1;
wire   [8:0] tmp_2_fu_1005_p3;
wire   [63:0] p_Result_12_fu_1012_p5;
wire   [31:0] trunc_ln738_fu_1024_p1;
wire   [31:0] bitcast_ln739_fu_1028_p1;
reg    grp_fu_234_ce;
wire    ap_CS_fsm_state33;
reg    ap_block_state33;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 in_data_0_sel_rd = 1'b0;
#0 in_data_0_sel_wr = 1'b0;
#0 in_data_0_state = 2'd0;
#0 in_last_V_0_sel_rd = 1'b0;
#0 in_last_V_0_sel_wr = 1'b0;
#0 in_last_V_0_state = 2'd0;
#0 out_data_1_sel_rd = 1'b0;
#0 out_data_1_sel_wr = 1'b0;
#0 out_data_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 21'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 grp_myproject_fu_229_ap_start_reg = 1'b0;
end

myproject grp_myproject_fu_229(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_myproject_fu_229_ap_start),
    .ap_done(grp_myproject_fu_229_ap_done),
    .ap_idle(grp_myproject_fu_229_ap_idle),
    .ap_ready(grp_myproject_fu_229_ap_ready),
    .input1_V_ap_vld(1'b1),
    .input1_V(in_local_V_fu_172),
    .ap_return_0(grp_myproject_fu_229_ap_return_0),
    .ap_return_1(grp_myproject_fu_229_ap_return_1),
    .ap_return_2(grp_myproject_fu_229_ap_return_2),
    .ap_return_3(grp_myproject_fu_229_ap_return_3),
    .ap_return_4(grp_myproject_fu_229_ap_return_4),
    .ap_return_5(grp_myproject_fu_229_ap_return_5),
    .ap_return_6(grp_myproject_fu_229_ap_return_6),
    .ap_return_7(grp_myproject_fu_229_ap_return_7),
    .ap_return_8(grp_myproject_fu_229_ap_return_8),
    .ap_return_9(grp_myproject_fu_229_ap_return_9),
    .input1_V_blk_n(grp_myproject_fu_229_input1_V_blk_n)
);

myproject_axi_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_fpext_32ns_64_2_1_U1272(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_data_0_data_out),
    .ce(grp_fu_234_ce),
    .dout(grp_fu_234_p1)
);

myproject_axi_mux_104_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_104_16_1_1_U1273(
    .din0(out_local_reg_1195),
    .din1(out_local_1_reg_1200),
    .din2(out_local_2_reg_1205),
    .din3(out_local_3_reg_1210),
    .din4(out_local_4_reg_1215),
    .din5(out_local_5_reg_1220),
    .din6(out_local_6_reg_1225),
    .din7(out_local_7_reg_1230),
    .din8(out_local_8_reg_1235),
    .din9(out_local_9_reg_1240),
    .din10(i2_0_reg_218),
    .dout(tmp_V_3_fu_719_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state26)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myproject_fu_229_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state9) & (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))))) begin
            grp_myproject_fu_229_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_229_ap_ready == 1'b1)) begin
            grp_myproject_fu_229_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_0_ack_out == 1'b1) & (in_data_0_vld_out == 1'b1))) begin
            in_data_0_sel_rd <= ~in_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_0_ack_in == 1'b1) & (in_data_0_vld_in == 1'b1))) begin
            in_data_0_sel_wr <= ~in_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_0_state <= 2'd0;
    end else begin
        if ((((in_data_0_state == 2'd2) & (in_data_0_vld_in == 1'b0)) | ((in_data_0_state == 2'd3) & (in_data_0_vld_in == 1'b0) & (in_data_0_ack_out == 1'b1)))) begin
            in_data_0_state <= 2'd2;
        end else if ((((in_data_0_state == 2'd1) & (in_data_0_ack_out == 1'b0)) | ((in_data_0_state == 2'd3) & (in_data_0_ack_out == 1'b0) & (in_data_0_vld_in == 1'b1)))) begin
            in_data_0_state <= 2'd1;
        end else if (((~((in_data_0_vld_in == 1'b0) & (in_data_0_ack_out == 1'b1)) & ~((in_data_0_ack_out == 1'b0) & (in_data_0_vld_in == 1'b1)) & (in_data_0_state == 2'd3)) | ((in_data_0_state == 2'd1) & (in_data_0_ack_out == 1'b1)) | ((in_data_0_state == 2'd2) & (in_data_0_vld_in == 1'b1)))) begin
            in_data_0_state <= 2'd3;
        end else begin
            in_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_out == 1'b1) & (in_last_V_0_vld_out == 1'b1))) begin
            in_last_V_0_sel_rd <= ~in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_in == 1'b1) & (in_last_V_0_vld_in == 1'b1))) begin
            in_last_V_0_sel_wr <= ~in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)))) begin
            in_last_V_0_state <= 2'd2;
        end else if ((((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd1;
        end else if (((~((in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)) & ~((in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)) & (in_last_V_0_state == 2'd3)) | ((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b1)) | ((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd3;
        end else begin
            in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_1_ack_out == 1'b1) & (out_data_1_vld_out == 1'b1))) begin
            out_data_1_sel_rd <= ~out_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_1_ack_in == 1'b1) & (out_data_1_vld_in == 1'b1))) begin
            out_data_1_sel_wr <= ~out_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_1_state <= 2'd0;
    end else begin
        if ((((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b0)) | ((out_data_1_state == 2'd3) & (out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)))) begin
            out_data_1_state <= 2'd2;
        end else if ((((out_data_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd1;
        end else if (((~((out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_data_1_vld_in == 1'b1)) & (out_data_1_state == 2'd3)) | ((out_data_1_state == 2'd1) & (out_data_1_ack_out == 1'b1)) | ((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd3;
        end else begin
            out_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_707_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i2_0_reg_218 <= i_1_fu_713_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i2_0_reg_218 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_206 <= 9'd0;
    end else if (((icmp_ln19_reg_1047 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_206 <= i_reg_1051;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        is_last_0_reg_194 <= 1'd0;
    end else if (((icmp_ln19_reg_1047 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_last_0_reg_194 <= is_last_reg_1062;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1276_pp1_iter2_reg == 1'd0) & (icmp_ln27_reg_1245_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln949_reg_1331 <= add_ln949_fu_861_p2;
        add_ln958_reg_1341 <= add_ln958_fu_872_p2;
        icmp_ln947_1_reg_1326 <= icmp_ln947_1_fu_855_p2;
        icmp_ln947_reg_1321 <= icmp_ln947_fu_829_p2;
        icmp_ln958_reg_1336 <= icmp_ln958_fu_866_p2;
        lsb_index_reg_1316 <= lsb_index_fu_814_p2;
        sub_ln958_reg_1346 <= sub_ln958_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1047_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln203_reg_1189 <= and_ln203_fu_616_p2;
        shl_ln203_reg_1183 <= shl_ln203_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_707_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln30_reg_1271 <= and_ln30_fu_755_p2;
        p_Result_10_reg_1260 <= tmp_V_3_fu_719_p12[32'd15];
        tmp_V_3_reg_1254 <= tmp_V_3_fu_719_p12;
        tmp_V_reg_1266 <= tmp_V_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln30_reg_1271_pp1_iter1_reg <= and_ln30_reg_1271;
        icmp_ln27_reg_1245 <= icmp_ln27_fu_707_p2;
        icmp_ln27_reg_1245_pp1_iter1_reg <= icmp_ln27_reg_1245;
        p_Result_10_reg_1260_pp1_iter1_reg <= p_Result_10_reg_1260;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln30_reg_1271_pp1_iter2_reg <= and_ln30_reg_1271_pp1_iter1_reg;
        and_ln30_reg_1271_pp1_iter3_reg <= and_ln30_reg_1271_pp1_iter2_reg;
        and_ln30_reg_1271_pp1_iter4_reg <= and_ln30_reg_1271_pp1_iter3_reg;
        icmp_ln27_reg_1245_pp1_iter2_reg <= icmp_ln27_reg_1245_pp1_iter1_reg;
        icmp_ln27_reg_1245_pp1_iter3_reg <= icmp_ln27_reg_1245_pp1_iter2_reg;
        icmp_ln27_reg_1245_pp1_iter4_reg <= icmp_ln27_reg_1245_pp1_iter3_reg;
        icmp_ln27_reg_1245_pp1_iter5_reg <= icmp_ln27_reg_1245_pp1_iter4_reg;
        icmp_ln935_reg_1276_pp1_iter2_reg <= icmp_ln935_reg_1276;
        icmp_ln935_reg_1276_pp1_iter3_reg <= icmp_ln935_reg_1276_pp1_iter2_reg;
        icmp_ln935_reg_1276_pp1_iter4_reg <= icmp_ln935_reg_1276_pp1_iter3_reg;
        p_Result_10_reg_1260_pp1_iter2_reg <= p_Result_10_reg_1260_pp1_iter1_reg;
        p_Result_10_reg_1260_pp1_iter3_reg <= p_Result_10_reg_1260_pp1_iter2_reg;
        p_Result_10_reg_1260_pp1_iter4_reg <= p_Result_10_reg_1260_pp1_iter3_reg;
        tmp_V_4_reg_1281_pp1_iter2_reg <= tmp_V_4_reg_1281;
        tmp_V_4_reg_1281_pp1_iter3_reg <= tmp_V_4_reg_1281_pp1_iter2_reg;
        trunc_ln943_reg_1294_pp1_iter2_reg <= trunc_ln943_reg_1294;
        trunc_ln943_reg_1294_pp1_iter3_reg <= trunc_ln943_reg_1294_pp1_iter2_reg;
        trunc_ln943_reg_1294_pp1_iter4_reg <= trunc_ln943_reg_1294_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1047_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln603_reg_1126 <= and_ln603_fu_461_p2;
        man_V_2_reg_1116 <= man_V_2_fu_367_p3;
        or_ln603_2_reg_1141 <= or_ln603_2_fu_487_p2;
        or_ln603_reg_1131 <= or_ln603_fu_467_p2;
        select_ln603_1_reg_1136 <= select_ln603_1_fu_473_p3;
        shl_ln_reg_1146[12 : 4] <= shl_ln_fu_493_p3[12 : 4];
        trunc_ln583_reg_1121 <= trunc_ln583_fu_374_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1047_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_34_reg_1161[12 : 4] <= empty_34_fu_546_p2[12 : 4];
        icmp_ln203_reg_1166 <= icmp_ln203_fu_551_p2;
        select_ln603_3_reg_1156 <= select_ln603_3_fu_539_p3;
        sub_ln203_1_reg_1178 <= sub_ln203_1_fu_568_p2;
        sub_ln203_reg_1173[12 : 4] <= sub_ln203_fu_556_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1047 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_tmp_V_reg_1077 <= {{ireg_V_fu_264_p1[62:52]}};
        p_Result_8_reg_1072 <= ireg_V_fu_264_p1[32'd63];
        trunc_ln556_reg_1067 <= trunc_ln556_fu_268_p1;
        trunc_ln565_reg_1082 <= trunc_ln565_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_206_pp0_iter1_reg <= i_0_reg_206;
        icmp_ln19_reg_1047 <= icmp_ln19_fu_237_p2;
        icmp_ln19_reg_1047_pp0_iter1_reg <= icmp_ln19_reg_1047;
        in_data_tmp_reg_1056_pp0_iter1_reg <= in_data_tmp_reg_1056;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_0_reg_206_pp0_iter2_reg <= i_0_reg_206_pp0_iter1_reg;
        icmp_ln19_reg_1047_pp0_iter2_reg <= icmp_ln19_reg_1047_pp0_iter1_reg;
        icmp_ln19_reg_1047_pp0_iter3_reg <= icmp_ln19_reg_1047_pp0_iter2_reg;
        icmp_ln19_reg_1047_pp0_iter4_reg <= icmp_ln19_reg_1047_pp0_iter3_reg;
        icmp_ln19_reg_1047_pp0_iter5_reg <= icmp_ln19_reg_1047_pp0_iter4_reg;
        icmp_ln203_reg_1166_pp0_iter5_reg <= icmp_ln203_reg_1166;
        in_data_tmp_reg_1056_pp0_iter2_reg <= in_data_tmp_reg_1056_pp0_iter1_reg;
        p_Result_8_reg_1072_pp0_iter2_reg <= p_Result_8_reg_1072;
        sh_amt_reg_1099_pp0_iter3_reg <= sh_amt_reg_1099;
        shl_ln_reg_1146_pp0_iter4_reg[12 : 4] <= shl_ln_reg_1146[12 : 4];
        trunc_ln565_reg_1082_pp0_iter2_reg <= trunc_ln565_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1051 <= i_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1047_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln571_reg_1087 <= icmp_ln571_fu_297_p2;
        icmp_ln581_reg_1093 <= icmp_ln581_fu_308_p2;
        icmp_ln582_reg_1105 <= icmp_ln582_fu_334_p2;
        sh_amt_reg_1099 <= sh_amt_fu_326_p3;
        tmp_4_reg_1111 <= {{sh_amt_fu_326_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_1245 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln935_reg_1276 <= icmp_ln935_fu_761_p2;
        l_reg_1289 <= l_fu_789_p3;
        tmp_V_4_reg_1281 <= tmp_V_4_fu_766_p3;
        trunc_ln943_reg_1294 <= trunc_ln943_fu_797_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_0_load_A == 1'b1)) begin
        in_data_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_0_load_B == 1'b1)) begin
        in_data_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_237_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_tmp_reg_1056 <= in_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_A == 1'b1)) begin
        in_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_B == 1'b1)) begin
        in_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1047_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        in_local_V_fu_172 <= in_local_V_1_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_237_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_last_reg_1062 <= is_last_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1276_pp1_iter3_reg == 1'd0) & (icmp_ln27_reg_1245_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        m_5_reg_1351 <= {{m_2_fu_960_p2[63:1]}};
        tmp_10_reg_1356 <= m_2_fu_960_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_A == 1'b1)) begin
        out_data_1_payload_A <= select_ln935_fu_1032_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_B == 1'b1)) begin
        out_data_1_payload_B <= select_ln935_fu_1032_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= and_ln30_reg_1271_pp1_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= and_ln30_reg_1271_pp1_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_local_1_reg_1200 <= grp_myproject_fu_229_ap_return_1;
        out_local_2_reg_1205 <= grp_myproject_fu_229_ap_return_2;
        out_local_3_reg_1210 <= grp_myproject_fu_229_ap_return_3;
        out_local_4_reg_1215 <= grp_myproject_fu_229_ap_return_4;
        out_local_5_reg_1220 <= grp_myproject_fu_229_ap_return_5;
        out_local_6_reg_1225 <= grp_myproject_fu_229_ap_return_6;
        out_local_7_reg_1230 <= grp_myproject_fu_229_ap_return_7;
        out_local_8_reg_1235 <= grp_myproject_fu_229_ap_return_8;
        out_local_9_reg_1240 <= grp_myproject_fu_229_ap_return_9;
        out_local_reg_1195 <= grp_myproject_fu_229_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1276 == 1'd0) & (icmp_ln27_reg_1245_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sub_ln944_reg_1299 <= sub_ln944_fu_801_p2;
        trunc_ln944_reg_1306 <= trunc_ln944_fu_806_p1;
        trunc_ln947_reg_1311 <= trunc_ln947_fu_810_p1;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_237_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_707_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_1047 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_210_p4 = i_reg_1051;
    end else begin
        ap_phi_mux_i_0_phi_fu_210_p4 = i_0_reg_206;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_1047 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_is_last_0_phi_fu_198_p4 = is_last_reg_1062;
    end else begin
        ap_phi_mux_is_last_0_phi_fu_198_p4 = is_last_0_reg_194;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_234_ce = 1'b1;
    end else begin
        grp_fu_234_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_237_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_0_ack_out = 1'b1;
    end else begin
        in_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_0_sel == 1'b1)) begin
        in_data_0_data_out = in_data_0_payload_B;
    end else begin
        in_data_0_data_out = in_data_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_237_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_last_V_0_ack_out = 1'b1;
    end else begin
        in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_last_V_0_sel == 1'b1)) begin
        in_last_V_0_data_out = in_last_V_0_payload_B;
    end else begin
        in_last_V_0_data_out = in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_237_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_data_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_data_1_sel == 1'b1)) begin
        out_data_1_data_out = out_data_1_payload_B;
    end else begin
        out_data_1_data_out = out_data_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_1245_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        out_data_1_vld_in = 1'b1;
    end else begin
        out_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_1245_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        out_last_V_1_vld_in = 1'b1;
    end else begin
        out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln27_reg_1245_pp1_iter5_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter6 == 1'b1)) | ((icmp_ln27_reg_1245_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
        out_r_TDATA_blk_n = out_data_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln19_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln19_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln27_fu_707_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln27_fu_707_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_302_p2 = (12'd1075 - zext_ln461_fu_294_p1);

assign a_fu_882_p2 = (icmp_ln947_reg_1321 & icmp_ln947_1_reg_1326);

assign add_ln581_fu_314_p2 = ($signed(12'd4088) + $signed(F2_fu_302_p2));

assign add_ln949_fu_861_p2 = ($signed(16'd65512) + $signed(trunc_ln944_reg_1306));

assign add_ln958_fu_872_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_1299));

assign add_ln964_fu_999_p2 = (select_ln964_fu_987_p3 + sub_ln964_fu_994_p2);

assign and_ln203_1_fu_645_p2 = (xor_ln203_fu_640_p2 & in_local_V_fu_172);

assign and_ln203_2_fu_651_p2 = (select_ln203_3_fu_634_p3 & and_ln203_reg_1189);

assign and_ln203_fu_616_p2 = (shl_ln203_1_fu_604_p2 & lshr_ln203_fu_610_p2);

assign and_ln30_fu_755_p2 = (is_last_0_reg_194 & icmp_ln30_fu_749_p2);

assign and_ln581_fu_427_p2 = (xor_ln582_fu_421_p2 & icmp_ln581_reg_1093);

assign and_ln582_fu_412_p2 = (xor_ln571_fu_407_p2 & icmp_ln582_reg_1105);

assign and_ln585_1_fu_444_p2 = (icmp_ln585_fu_378_p2 & and_ln581_fu_427_p2);

assign and_ln585_fu_438_p2 = (xor_ln585_fu_432_p2 & and_ln581_fu_427_p2);

assign and_ln603_fu_461_p2 = (xor_ln581_fu_455_p2 & icmp_ln603_fu_383_p2);

assign and_ln949_fu_905_p2 = (xor_ln949_fu_893_p2 & p_Result_5_fu_899_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_NS_fsm_state9 = ap_NS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln19_fu_237_p2 == 1'd0) & (in_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln19_fu_237_p2 == 1'd0) & (in_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp1_iter6 == 1'b1)) | ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp1_iter5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp1_iter6 == 1'b1)) | ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp1_iter5 == 1'b1)));
end

assign ap_block_state26_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln19_fu_237_p2 == 1'd0) & (in_data_0_vld_out == 1'b0));
end

assign ap_block_state30_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_io = ((icmp_ln27_reg_1245_pp1_iter4_reg == 1'd0) & (out_data_1_ack_in == 1'b0));
end

assign ap_block_state31_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = ((icmp_ln27_reg_1245_pp1_iter5_reg == 1'd0) & (out_data_1_ack_in == 1'b0));
end

assign ap_block_state32_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33 = ((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ashr_ln586_fu_508_p2 = $signed(man_V_2_reg_1116) >>> zext_ln586_fu_504_p1;

assign bitcast_ln696_fu_388_p1 = in_data_tmp_reg_1056_pp0_iter2_reg;

assign bitcast_ln739_fu_1028_p1 = trunc_ln738_fu_1024_p1;

assign empty_34_fu_546_p2 = (shl_ln_reg_1146 | 13'd15);

assign grp_myproject_fu_229_ap_start = grp_myproject_fu_229_ap_start_reg;

assign i_1_fu_713_p2 = (i2_0_reg_218 + 4'd1);

assign i_fu_243_p2 = (ap_phi_mux_i_0_phi_fu_210_p4 + 9'd1);

assign icmp_ln19_fu_237_p2 = ((ap_phi_mux_i_0_phi_fu_210_p4 == 9'd324) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_551_p2 = ((shl_ln_reg_1146 > empty_34_fu_546_p2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_707_p2 = ((i2_0_reg_218 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_749_p2 = ((i2_0_reg_218 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_297_p2 = ((trunc_ln556_reg_1067 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_308_p2 = (($signed(F2_fu_302_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_334_p2 = ((F2_fu_302_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_378_p2 = ((sh_amt_reg_1099 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_383_p2 = ((tmp_4_reg_1111 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_761_p2 = ((tmp_V_3_reg_1254 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_855_p2 = ((p_Result_6_fu_850_p2 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_829_p2 = (($signed(tmp_8_fu_819_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_866_p2 = (($signed(lsb_index_fu_814_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign in_data_0_ack_in = in_data_0_state[1'd1];

assign in_data_0_load_A = (in_data_0_state_cmp_full & ~in_data_0_sel_wr);

assign in_data_0_load_B = (in_data_0_state_cmp_full & in_data_0_sel_wr);

assign in_data_0_sel = in_data_0_sel_rd;

assign in_data_0_state_cmp_full = ((in_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_0_vld_in = in_r_TVALID;

assign in_data_0_vld_out = in_data_0_state[1'd0];

assign in_last_V_0_ack_in = in_last_V_0_state[1'd1];

assign in_last_V_0_load_A = (in_last_V_0_state_cmp_full & ~in_last_V_0_sel_wr);

assign in_last_V_0_load_B = (in_last_V_0_state_cmp_full & in_last_V_0_sel_wr);

assign in_last_V_0_sel = in_last_V_0_sel_rd;

assign in_last_V_0_state_cmp_full = ((in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_last_V_0_vld_in = in_r_TVALID;

assign in_last_V_0_vld_out = in_last_V_0_state[1'd0];

assign in_local_V_1_fu_656_p2 = (and_ln203_2_fu_651_p2 | and_ln203_1_fu_645_p2);

assign in_r_TREADY = in_last_V_0_state[1'd1];

assign ireg_V_fu_264_p1 = grp_fu_234_p1;

assign is_last_fu_258_p2 = (in_last_V_0_data_out | ap_phi_mux_is_last_0_phi_fu_198_p4);


always @ (p_Result_11_fu_781_p3) begin
    if (p_Result_11_fu_781_p3[0] == 1'b1) begin
        l_fu_789_p3 = 32'd0;
    end else if (p_Result_11_fu_781_p3[1] == 1'b1) begin
        l_fu_789_p3 = 32'd1;
    end else if (p_Result_11_fu_781_p3[2] == 1'b1) begin
        l_fu_789_p3 = 32'd2;
    end else if (p_Result_11_fu_781_p3[3] == 1'b1) begin
        l_fu_789_p3 = 32'd3;
    end else if (p_Result_11_fu_781_p3[4] == 1'b1) begin
        l_fu_789_p3 = 32'd4;
    end else if (p_Result_11_fu_781_p3[5] == 1'b1) begin
        l_fu_789_p3 = 32'd5;
    end else if (p_Result_11_fu_781_p3[6] == 1'b1) begin
        l_fu_789_p3 = 32'd6;
    end else if (p_Result_11_fu_781_p3[7] == 1'b1) begin
        l_fu_789_p3 = 32'd7;
    end else if (p_Result_11_fu_781_p3[8] == 1'b1) begin
        l_fu_789_p3 = 32'd8;
    end else if (p_Result_11_fu_781_p3[9] == 1'b1) begin
        l_fu_789_p3 = 32'd9;
    end else if (p_Result_11_fu_781_p3[10] == 1'b1) begin
        l_fu_789_p3 = 32'd10;
    end else if (p_Result_11_fu_781_p3[11] == 1'b1) begin
        l_fu_789_p3 = 32'd11;
    end else if (p_Result_11_fu_781_p3[12] == 1'b1) begin
        l_fu_789_p3 = 32'd12;
    end else if (p_Result_11_fu_781_p3[13] == 1'b1) begin
        l_fu_789_p3 = 32'd13;
    end else if (p_Result_11_fu_781_p3[14] == 1'b1) begin
        l_fu_789_p3 = 32'd14;
    end else if (p_Result_11_fu_781_p3[15] == 1'b1) begin
        l_fu_789_p3 = 32'd15;
    end else if (p_Result_11_fu_781_p3[16] == 1'b1) begin
        l_fu_789_p3 = 32'd16;
    end else if (p_Result_11_fu_781_p3[17] == 1'b1) begin
        l_fu_789_p3 = 32'd17;
    end else if (p_Result_11_fu_781_p3[18] == 1'b1) begin
        l_fu_789_p3 = 32'd18;
    end else if (p_Result_11_fu_781_p3[19] == 1'b1) begin
        l_fu_789_p3 = 32'd19;
    end else if (p_Result_11_fu_781_p3[20] == 1'b1) begin
        l_fu_789_p3 = 32'd20;
    end else if (p_Result_11_fu_781_p3[21] == 1'b1) begin
        l_fu_789_p3 = 32'd21;
    end else if (p_Result_11_fu_781_p3[22] == 1'b1) begin
        l_fu_789_p3 = 32'd22;
    end else if (p_Result_11_fu_781_p3[23] == 1'b1) begin
        l_fu_789_p3 = 32'd23;
    end else if (p_Result_11_fu_781_p3[24] == 1'b1) begin
        l_fu_789_p3 = 32'd24;
    end else if (p_Result_11_fu_781_p3[25] == 1'b1) begin
        l_fu_789_p3 = 32'd25;
    end else if (p_Result_11_fu_781_p3[26] == 1'b1) begin
        l_fu_789_p3 = 32'd26;
    end else if (p_Result_11_fu_781_p3[27] == 1'b1) begin
        l_fu_789_p3 = 32'd27;
    end else if (p_Result_11_fu_781_p3[28] == 1'b1) begin
        l_fu_789_p3 = 32'd28;
    end else if (p_Result_11_fu_781_p3[29] == 1'b1) begin
        l_fu_789_p3 = 32'd29;
    end else if (p_Result_11_fu_781_p3[30] == 1'b1) begin
        l_fu_789_p3 = 32'd30;
    end else if (p_Result_11_fu_781_p3[31] == 1'b1) begin
        l_fu_789_p3 = 32'd31;
    end else begin
        l_fu_789_p3 = 32'd32;
    end
end

assign lsb_index_fu_814_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_1299));

assign lshr_ln203_fu_610_p2 = 5184'd3463359085397994440860551679028512105390716258984678871449998709614328511165647666379773195047670127864290919732359717494335199937170784765089113937386295443429487336375922239448352265121668832811566294159151160976370420689961745866716238601658710225066330699373293543258023323654954316706777534265899069630532558037569709788696846481629693504554695476465927125673327862461543383799404590100888539542978385699076581097860749433911638915084522717560143397760282355311261587769898828551537524325412490683951700481578462048681920595971266209028445882564350140420131002798907424296242985685824756757879368122113502864389914039476542022029827351668963948825206657414534946452553462074662524900194094664015710327026309497625749598461793974397066030891089812252330707404367096117720530881888922291559439783308910953770820504612863559482569035769426393349196518974115076053463578519344208765384627881254356977734987612538038928433884423717963373578799925723657009369646355243189505246788135882861362411757543306040853223814958109542384174176750473878839678030650607016744140150260911979187451581567161184321987239467669830618210932010952750180607406238277827521776593249550523301841322625672216984276071728228197922563211923361040109915901146984005640534358517782600050065808747930955510528248598869185645444305026860619610065205786178736606283087366141182645322759532811604750099375214201987112233022111165489619056716977489838578019624257593864426140822922257627620756406086630509118250159613682926657830586991475568454720037516348593571302998343122369251888454434815 >> zext_ln203_3_fu_595_p1;

assign lshr_ln947_fu_844_p2 = 16'd65535 >> zext_ln947_fu_840_p1;

assign lshr_ln958_fu_931_p2 = zext_ln957_1_fu_928_p1 >> add_ln958_reg_1341;

assign m_1_fu_949_p3 = ((icmp_ln958_reg_1336[0:0] === 1'b1) ? zext_ln958_fu_936_p1 : shl_ln958_fu_943_p2);

assign m_2_fu_960_p2 = (m_1_fu_949_p3 + zext_ln961_fu_956_p1);

assign m_6_fu_984_p1 = m_5_reg_1351;

assign m_fu_925_p1 = tmp_V_4_reg_1281_pp1_iter3_reg;

assign man_V_1_fu_361_p2 = (54'd0 - p_Result_9_fu_357_p1);

assign man_V_2_fu_367_p3 = ((p_Result_8_reg_1072_pp0_iter2_reg[0:0] === 1'b1) ? man_V_1_fu_361_p2 : p_Result_9_fu_357_p1);

assign or_ln581_fu_450_p2 = (or_ln582_fu_417_p2 | icmp_ln581_reg_1093);

assign or_ln582_fu_417_p2 = (icmp_ln582_reg_1105 | icmp_ln571_reg_1087);

assign or_ln603_1_fu_481_p2 = (and_ln585_fu_438_p2 | and_ln582_fu_412_p2);

assign or_ln603_2_fu_487_p2 = (or_ln603_fu_467_p2 | or_ln603_1_fu_481_p2);

assign or_ln603_fu_467_p2 = (and_ln603_fu_461_p2 | and_ln585_1_fu_444_p2);

assign or_ln949_fu_911_p2 = (and_ln949_fu_905_p2 | a_fu_882_p2);

assign or_ln_fu_917_p3 = {{31'd0}, {or_ln949_fu_911_p2}};

assign out_data_1_ack_in = out_data_1_state[1'd1];

assign out_data_1_ack_out = out_r_TREADY;

assign out_data_1_load_A = (out_data_1_state_cmp_full & ~out_data_1_sel_wr);

assign out_data_1_load_B = (out_data_1_state_cmp_full & out_data_1_sel_wr);

assign out_data_1_sel = out_data_1_sel_rd;

assign out_data_1_state_cmp_full = ((out_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_1_vld_out = out_data_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TVALID = out_last_V_1_state[1'd0];

assign p_Result_11_fu_781_p3 = {{16'd65535}, {p_Result_s_fu_771_p4}};

assign p_Result_12_fu_1012_p5 = {{m_6_fu_984_p1[63:32]}, {tmp_2_fu_1005_p3}, {m_6_fu_984_p1[22:0]}};

assign p_Result_5_fu_899_p3 = tmp_V_4_reg_1281_pp1_iter3_reg[add_ln949_reg_1331];

assign p_Result_6_fu_850_p2 = (tmp_V_4_reg_1281_pp1_iter2_reg & lshr_ln947_fu_844_p2);

assign p_Result_9_fu_357_p1 = tmp_s_fu_350_p3;

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_766_p3) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            p_Result_s_fu_771_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_771_p4[ap_tvar_int_0] = tmp_V_4_fu_766_p3[15 - ap_tvar_int_0];
        end
    end
end

assign select_ln203_1_fu_577_p3 = ((icmp_ln203_reg_1166[0:0] === 1'b1) ? empty_34_reg_1161 : shl_ln_reg_1146_pp0_iter4_reg);

assign select_ln203_2_fu_582_p3 = ((icmp_ln203_reg_1166[0:0] === 1'b1) ? sub_ln203_reg_1173 : shl_ln_reg_1146_pp0_iter4_reg);

assign select_ln203_3_fu_634_p3 = ((icmp_ln203_reg_1166_pp0_iter5_reg[0:0] === 1'b1) ? tmp_6_fu_625_p4 : shl_ln203_reg_1183);

assign select_ln203_fu_561_p3 = ((icmp_ln203_fu_551_p2[0:0] === 1'b1) ? shl_ln_reg_1146 : empty_34_fu_546_p2);

assign select_ln588_fu_399_p3 = ((tmp_5_fu_391_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_473_p3 = ((and_ln585_fu_438_p2[0:0] === 1'b1) ? select_ln588_fu_399_p3 : trunc_ln583_fu_374_p1);

assign select_ln603_2_fu_533_p3 = ((or_ln603_reg_1131[0:0] === 1'b1) ? select_ln603_fu_526_p3 : select_ln603_1_reg_1136);

assign select_ln603_3_fu_539_p3 = ((or_ln603_2_reg_1141[0:0] === 1'b1) ? select_ln603_2_fu_533_p3 : 16'd0);

assign select_ln603_fu_526_p3 = ((and_ln603_reg_1126[0:0] === 1'b1) ? shl_ln604_fu_521_p2 : trunc_ln586_fu_513_p1);

assign select_ln935_fu_1032_p3 = ((icmp_ln935_reg_1276_pp1_iter4_reg[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_1028_p1);

assign select_ln964_fu_987_p3 = ((tmp_10_reg_1356[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln581_fu_501_p1 = sh_amt_reg_1099_pp0_iter3_reg;

assign sext_ln581cast_fu_517_p1 = sext_ln581_fu_501_p1[15:0];

assign sh_amt_fu_326_p3 = ((icmp_ln581_fu_308_p2[0:0] === 1'b1) ? add_ln581_fu_314_p2 : sub_ln581_fu_320_p2);

assign shl_ln203_1_fu_604_p2 = 5184'dzext_ln203_2_fu_591_p1;

assign shl_ln203_fu_598_p2 = zext_ln203_fu_574_p1 << zext_ln203_1_fu_587_p1;

assign shl_ln604_fu_521_p2 = trunc_ln583_reg_1121 << sext_ln581cast_fu_517_p1;

assign shl_ln958_fu_943_p2 = m_fu_925_p1 << zext_ln958_1_fu_940_p1;

assign shl_ln_fu_493_p3 = {{i_0_reg_206_pp0_iter2_reg}, {4'd0}};

assign sub_ln203_1_fu_568_p2 = ($signed(13'd5183) - $signed(select_ln203_fu_561_p3));

assign sub_ln203_fu_556_p2 = ($signed(13'd5183) - $signed(shl_ln_reg_1146));

assign sub_ln581_fu_320_p2 = (12'd8 - F2_fu_302_p2);

assign sub_ln944_fu_801_p2 = (32'd16 - l_reg_1289);

assign sub_ln947_fu_835_p2 = (5'd9 - trunc_ln947_reg_1311);

assign sub_ln958_fu_877_p2 = (32'd25 - sub_ln944_reg_1299);

assign sub_ln964_fu_994_p2 = (8'd8 - trunc_ln943_reg_1294_pp1_iter4_reg);

assign tmp_2_fu_1005_p3 = {{p_Result_10_reg_1260_pp1_iter4_reg}, {add_ln964_fu_999_p2}};

assign tmp_5_fu_391_p3 = bitcast_ln696_fu_388_p1[32'd31];

integer ap_tvar_int_1;

always @ (shl_ln203_reg_1183) begin
    for (ap_tvar_int_1 = 5184 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 5183 - 0) begin
            tmp_6_fu_625_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_6_fu_625_p4[ap_tvar_int_1] = shl_ln203_reg_1183[5183 - ap_tvar_int_1];
        end
    end
end

assign tmp_8_fu_819_p4 = {{lsb_index_fu_814_p2[31:1]}};

assign tmp_9_fu_886_p3 = lsb_index_reg_1316[32'd31];

assign tmp_V_4_fu_766_p3 = ((p_Result_10_reg_1260[0:0] === 1'b1) ? tmp_V_reg_1266 : tmp_V_3_reg_1254);

assign tmp_V_fu_743_p2 = (16'd0 - tmp_V_3_fu_719_p12);

assign tmp_s_fu_350_p3 = {{1'd1}, {trunc_ln565_reg_1082_pp0_iter2_reg}};

assign trunc_ln556_fu_268_p1 = ireg_V_fu_264_p1[62:0];

assign trunc_ln565_fu_290_p1 = ireg_V_fu_264_p1[51:0];

assign trunc_ln583_fu_374_p1 = man_V_2_fu_367_p3[15:0];

assign trunc_ln586_fu_513_p1 = ashr_ln586_fu_508_p2[15:0];

assign trunc_ln738_fu_1024_p1 = p_Result_12_fu_1012_p5[31:0];

assign trunc_ln943_fu_797_p1 = l_fu_789_p3[7:0];

assign trunc_ln944_fu_806_p1 = sub_ln944_fu_801_p2[15:0];

assign trunc_ln947_fu_810_p1 = sub_ln944_fu_801_p2[4:0];

assign xor_ln203_fu_640_p2 = (5184'dand_ln203_reg_1189);

assign xor_ln571_fu_407_p2 = (icmp_ln571_reg_1087 ^ 1'd1);

assign xor_ln581_fu_455_p2 = (or_ln581_fu_450_p2 ^ 1'd1);

assign xor_ln582_fu_421_p2 = (or_ln582_fu_417_p2 ^ 1'd1);

assign xor_ln585_fu_432_p2 = (icmp_ln585_fu_378_p2 ^ 1'd1);

assign xor_ln949_fu_893_p2 = (tmp_9_fu_886_p3 ^ 1'd1);

assign zext_ln203_1_fu_587_p1 = select_ln203_2_fu_582_p3;

assign zext_ln203_2_fu_591_p1 = select_ln203_1_fu_577_p3;

assign zext_ln203_3_fu_595_p1 = sub_ln203_1_reg_1178;

assign zext_ln203_fu_574_p1 = select_ln603_3_reg_1156;

assign zext_ln461_fu_294_p1 = exp_tmp_V_reg_1077;

assign zext_ln586_fu_504_p1 = $unsigned(sext_ln581_fu_501_p1);

assign zext_ln947_fu_840_p1 = sub_ln947_fu_835_p2;

assign zext_ln957_1_fu_928_p1 = tmp_V_4_reg_1281_pp1_iter3_reg;

assign zext_ln958_1_fu_940_p1 = sub_ln958_reg_1346;

assign zext_ln958_fu_936_p1 = lshr_ln958_fu_931_p2;

assign zext_ln961_fu_956_p1 = or_ln_fu_917_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1146[3:0] <= 4'b0000;
    shl_ln_reg_1146_pp0_iter4_reg[3:0] <= 4'b0000;
    empty_34_reg_1161[3:0] <= 4'b1111;
    sub_ln203_reg_1173[3:0] <= 4'b1111;
end

endmodule //myproject_axi
