-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.326000,HLS_SYN_LAT=364,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1231,HLS_SYN_FF=180023,HLS_SYN_LUT=107162,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_144 : STD_LOGIC_VECTOR (8 downto 0) := "101000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_F : STD_LOGIC_VECTOR (12 downto 0) := "0000000001111";
    constant ap_const_lv13_143F : STD_LOGIC_VECTOR (12 downto 0) := "1010000111111";
    constant ap_const_lv5184_lc_2 : STD_LOGIC_VECTOR (5183 downto
    constant ap_const_lv32_143F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010000111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_0_vld_in : STD_LOGIC;
    signal in_data_0_vld_out : STD_LOGIC;
    signal in_data_0_ack_in : STD_LOGIC;
    signal in_data_0_ack_out : STD_LOGIC;
    signal in_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_0_sel_rd : STD_LOGIC := '0';
    signal in_data_0_sel_wr : STD_LOGIC := '0';
    signal in_data_0_sel : STD_LOGIC;
    signal in_data_0_load_A : STD_LOGIC;
    signal in_data_0_load_B : STD_LOGIC;
    signal in_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_0_state_cmp_full : STD_LOGIC;
    signal in_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_vld_in : STD_LOGIC;
    signal in_last_V_0_vld_out : STD_LOGIC;
    signal in_last_V_0_ack_in : STD_LOGIC;
    signal in_last_V_0_ack_out : STD_LOGIC;
    signal in_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_last_V_0_sel : STD_LOGIC;
    signal in_last_V_0_load_A : STD_LOGIC;
    signal in_last_V_0_load_B : STD_LOGIC;
    signal in_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_last_V_0_state_cmp_full : STD_LOGIC;
    signal out_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_vld_in : STD_LOGIC;
    signal out_data_1_vld_out : STD_LOGIC;
    signal out_data_1_ack_in : STD_LOGIC;
    signal out_data_1_ack_out : STD_LOGIC;
    signal out_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_sel_rd : STD_LOGIC := '0';
    signal out_data_1_sel_wr : STD_LOGIC := '0';
    signal out_data_1_sel : STD_LOGIC;
    signal out_data_1_load_A : STD_LOGIC;
    signal out_data_1_load_B : STD_LOGIC;
    signal out_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_1_state_cmp_full : STD_LOGIC;
    signal out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_vld_in : STD_LOGIC;
    signal out_last_V_1_vld_out : STD_LOGIC;
    signal out_last_V_1_ack_in : STD_LOGIC;
    signal out_last_V_1_ack_out : STD_LOGIC;
    signal out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_last_V_1_sel : STD_LOGIC;
    signal out_last_V_1_load_A : STD_LOGIC;
    signal out_last_V_1_load_B : STD_LOGIC;
    signal out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_last_V_1_state_cmp_full : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln19_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln27_reg_1245 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1245_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal icmp_ln27_reg_1245_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_0_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_206 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_206_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_206_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i2_0_reg_218 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1047_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1047_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1047_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1047_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1047_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_243_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_1051 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_data_tmp_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1056_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1056_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal is_last_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln556_fu_268_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_reg_1067 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_8_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_1072_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_1077 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_290_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1082 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1082_pp0_iter2_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_326_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1099 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1099_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal man_V_2_fu_367_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1116 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln583_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_1121 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln603_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_1126 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_reg_1136 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln603_2_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_493_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_1146 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_1146_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln603_3_fu_539_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_3_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_34_fu_546_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_34_reg_1161 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln203_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_1166_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_556_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln203_reg_1173 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln203_1_fu_568_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln203_1_reg_1178 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln203_fu_598_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal shl_ln203_reg_1183 : STD_LOGIC_VECTOR (5183 downto 0);
    signal and_ln203_fu_616_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal and_ln203_reg_1189 : STD_LOGIC_VECTOR (5183 downto 0);
    signal out_local_reg_1195 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal out_local_1_reg_1200 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_2_reg_1205 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_3_reg_1210 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_4_reg_1215 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_5_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_6_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_7_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_8_reg_1235 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_9_reg_1240 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln27_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state26_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state31_io : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln27_reg_1245_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1245_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1245_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_713_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_V_3_fu_719_p12 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_3_reg_1254 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1260_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1260_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1260_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1260_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_743_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_1266 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln30_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1271_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1271_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1271_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1271_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1276 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1276_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1276_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1276_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_766_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1281 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1281_pp1_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1281_pp1_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal l_fu_789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_797_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1294 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1294_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1294_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1294_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_fu_806_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_reg_1306 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln947_fu_810_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln947_reg_1311 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsb_index_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln947_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_reg_1326 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_861_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln949_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln958_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1336 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_5_reg_1351 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_reg_1356 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln935_fu_1032_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal grp_myproject_fu_229_ap_start : STD_LOGIC;
    signal grp_myproject_fu_229_ap_done : STD_LOGIC;
    signal grp_myproject_fu_229_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_229_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_229_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_229_input1_V_blk_n : STD_LOGIC;
    signal ap_phi_mux_is_last_0_phi_fu_198_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_0_phi_fu_210_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_myproject_fu_229_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal in_local_V_fu_172 : STD_LOGIC_VECTOR (5183 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal in_local_V_1_fu_656_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln461_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_302_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_314_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_320_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_350_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_9_fu_357_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_361_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_391_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln582_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_504_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_508_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581cast_fu_517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln604_fu_521_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_513_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_fu_526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_2_fu_533_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_fu_561_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln203_2_fu_582_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln203_1_fu_577_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_fu_574_p1 : STD_LOGIC_VECTOR (5183 downto 0);
    signal zext_ln203_1_fu_587_p1 : STD_LOGIC_VECTOR (5183 downto 0);
    signal zext_ln203_2_fu_591_p1 : STD_LOGIC_VECTOR (5183 downto 0);
    signal zext_ln203_3_fu_595_p1 : STD_LOGIC_VECTOR (5183 downto 0);
    signal shl_ln203_1_fu_604_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal lshr_ln203_fu_610_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal tmp_6_fu_625_p4 : STD_LOGIC_VECTOR (5183 downto 0);
    signal xor_ln203_fu_640_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal select_ln203_3_fu_634_p3 : STD_LOGIC_VECTOR (5183 downto 0);
    signal and_ln203_1_fu_645_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal and_ln203_2_fu_651_p2 : STD_LOGIC_VECTOR (5183 downto 0);
    signal icmp_ln30_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_771_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_819_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_835_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_840_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln947_fu_844_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_850_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_899_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln957_1_fu_928_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_1_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_fu_943_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_917_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_949_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_960_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln964_fu_987_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_994_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_999_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_6_fu_984_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1005_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_12_fu_1012_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_ce : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_state33 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component myproject IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input1_V_ap_vld : IN STD_LOGIC;
        input1_V : IN STD_LOGIC_VECTOR (5183 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input1_V_blk_n : OUT STD_LOGIC );
    end component;


    component myproject_axi_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myproject_axi_mux_104_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_myproject_fu_229 : component myproject
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_myproject_fu_229_ap_start,
        ap_done => grp_myproject_fu_229_ap_done,
        ap_idle => grp_myproject_fu_229_ap_idle,
        ap_ready => grp_myproject_fu_229_ap_ready,
        input1_V_ap_vld => ap_const_logic_1,
        input1_V => in_local_V_fu_172,
        ap_return_0 => grp_myproject_fu_229_ap_return_0,
        ap_return_1 => grp_myproject_fu_229_ap_return_1,
        ap_return_2 => grp_myproject_fu_229_ap_return_2,
        ap_return_3 => grp_myproject_fu_229_ap_return_3,
        ap_return_4 => grp_myproject_fu_229_ap_return_4,
        ap_return_5 => grp_myproject_fu_229_ap_return_5,
        ap_return_6 => grp_myproject_fu_229_ap_return_6,
        ap_return_7 => grp_myproject_fu_229_ap_return_7,
        ap_return_8 => grp_myproject_fu_229_ap_return_8,
        ap_return_9 => grp_myproject_fu_229_ap_return_9,
        input1_V_blk_n => grp_myproject_fu_229_input1_V_blk_n);

    myproject_axi_fpext_32ns_64_2_1_U1272 : component myproject_axi_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_data_0_data_out,
        ce => grp_fu_234_ce,
        dout => grp_fu_234_p1);

    myproject_axi_mux_104_16_1_1_U1273 : component myproject_axi_mux_104_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => out_local_reg_1195,
        din1 => out_local_1_reg_1200,
        din2 => out_local_2_reg_1205,
        din3 => out_local_3_reg_1210,
        din4 => out_local_4_reg_1215,
        din5 => out_local_5_reg_1220,
        din6 => out_local_6_reg_1225,
        din7 => out_local_7_reg_1230,
        din8 => out_local_8_reg_1235,
        din9 => out_local_9_reg_1240,
        din10 => i2_0_reg_218,
        dout => tmp_V_3_fu_719_p12);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_myproject_fu_229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_myproject_fu_229_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state9) and (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
                    grp_myproject_fu_229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_229_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_0_ack_out = ap_const_logic_1) and (in_data_0_vld_out = ap_const_logic_1))) then 
                                        in_data_0_sel_rd <= not(in_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_0_ack_in = ap_const_logic_1) and (in_data_0_vld_in = ap_const_logic_1))) then 
                                        in_data_0_sel_wr <= not(in_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_0_state = ap_const_lv2_2) and (in_data_0_vld_in = ap_const_logic_0)) or ((in_data_0_state = ap_const_lv2_3) and (in_data_0_vld_in = ap_const_logic_0) and (in_data_0_ack_out = ap_const_logic_1)))) then 
                    in_data_0_state <= ap_const_lv2_2;
                elsif ((((in_data_0_state = ap_const_lv2_1) and (in_data_0_ack_out = ap_const_logic_0)) or ((in_data_0_state = ap_const_lv2_3) and (in_data_0_ack_out = ap_const_logic_0) and (in_data_0_vld_in = ap_const_logic_1)))) then 
                    in_data_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_0_vld_in = ap_const_logic_0) and (in_data_0_ack_out = ap_const_logic_1))) and not(((in_data_0_ack_out = ap_const_logic_0) and (in_data_0_vld_in = ap_const_logic_1))) and (in_data_0_state = ap_const_lv2_3)) or ((in_data_0_state = ap_const_lv2_1) and (in_data_0_ack_out = ap_const_logic_1)) or ((in_data_0_state = ap_const_lv2_2) and (in_data_0_vld_in = ap_const_logic_1)))) then 
                    in_data_0_state <= ap_const_lv2_3;
                else 
                    in_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_out = ap_const_logic_1) and (in_last_V_0_vld_out = ap_const_logic_1))) then 
                                        in_last_V_0_sel_rd <= not(in_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_in = ap_const_logic_1) and (in_last_V_0_vld_in = ap_const_logic_1))) then 
                                        in_last_V_0_sel_wr <= not(in_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1))) and not(((in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1))) and (in_last_V_0_state = ap_const_lv2_3)) or ((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_1)) or ((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_1_ack_out = ap_const_logic_1) and (out_data_1_vld_out = ap_const_logic_1))) then 
                                        out_data_1_sel_rd <= not(out_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_1_ack_in = ap_const_logic_1) and (out_data_1_vld_in = ap_const_logic_1))) then 
                                        out_data_1_sel_wr <= not(out_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_1_state = ap_const_lv2_2) and (out_data_1_vld_in = ap_const_logic_0)) or ((out_data_1_state = ap_const_lv2_3) and (out_data_1_vld_in = ap_const_logic_0) and (out_data_1_ack_out = ap_const_logic_1)))) then 
                    out_data_1_state <= ap_const_lv2_2;
                elsif ((((out_data_1_state = ap_const_lv2_1) and (out_r_TREADY = ap_const_logic_0)) or ((out_data_1_state = ap_const_lv2_3) and (out_r_TREADY = ap_const_logic_0) and (out_data_1_vld_in = ap_const_logic_1)))) then 
                    out_data_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_1_vld_in = ap_const_logic_0) and (out_data_1_ack_out = ap_const_logic_1))) and not(((out_r_TREADY = ap_const_logic_0) and (out_data_1_vld_in = ap_const_logic_1))) and (out_data_1_state = ap_const_lv2_3)) or ((out_data_1_state = ap_const_lv2_1) and (out_data_1_ack_out = ap_const_logic_1)) or ((out_data_1_state = ap_const_lv2_2) and (out_data_1_vld_in = ap_const_logic_1)))) then 
                    out_data_1_state <= ap_const_lv2_3;
                else 
                    out_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_out = ap_const_logic_1) and (out_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_last_V_1_sel_rd <= not(out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_in = ap_const_logic_1) and (out_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_last_V_1_sel_wr <= not(out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_last_V_1_state = ap_const_lv2_1) and (out_r_TREADY = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_r_TREADY = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1))) and not(((out_r_TREADY = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1))) and (out_last_V_1_state = ap_const_lv2_3)) or ((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_1)) or ((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_707_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i2_0_reg_218 <= i_1_fu_713_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i2_0_reg_218 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_206 <= ap_const_lv9_0;
            elsif (((icmp_ln19_reg_1047 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_206 <= i_reg_1051;
            end if; 
        end if;
    end process;

    is_last_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                is_last_0_reg_194 <= ap_const_lv1_0;
            elsif (((icmp_ln19_reg_1047 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                is_last_0_reg_194 <= is_last_reg_1062;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1276_pp1_iter2_reg = ap_const_lv1_0) and (icmp_ln27_reg_1245_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln949_reg_1331 <= add_ln949_fu_861_p2;
                add_ln958_reg_1341 <= add_ln958_fu_872_p2;
                icmp_ln947_1_reg_1326 <= icmp_ln947_1_fu_855_p2;
                icmp_ln947_reg_1321 <= icmp_ln947_fu_829_p2;
                icmp_ln958_reg_1336 <= icmp_ln958_fu_866_p2;
                lsb_index_reg_1316 <= lsb_index_fu_814_p2;
                sub_ln958_reg_1346 <= sub_ln958_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1047_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln203_reg_1189 <= and_ln203_fu_616_p2;
                shl_ln203_reg_1183 <= shl_ln203_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_707_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                and_ln30_reg_1271 <= and_ln30_fu_755_p2;
                p_Result_10_reg_1260 <= tmp_V_3_fu_719_p12(15 downto 15);
                tmp_V_3_reg_1254 <= tmp_V_3_fu_719_p12;
                tmp_V_reg_1266 <= tmp_V_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                and_ln30_reg_1271_pp1_iter1_reg <= and_ln30_reg_1271;
                icmp_ln27_reg_1245 <= icmp_ln27_fu_707_p2;
                icmp_ln27_reg_1245_pp1_iter1_reg <= icmp_ln27_reg_1245;
                p_Result_10_reg_1260_pp1_iter1_reg <= p_Result_10_reg_1260;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                and_ln30_reg_1271_pp1_iter2_reg <= and_ln30_reg_1271_pp1_iter1_reg;
                and_ln30_reg_1271_pp1_iter3_reg <= and_ln30_reg_1271_pp1_iter2_reg;
                and_ln30_reg_1271_pp1_iter4_reg <= and_ln30_reg_1271_pp1_iter3_reg;
                icmp_ln27_reg_1245_pp1_iter2_reg <= icmp_ln27_reg_1245_pp1_iter1_reg;
                icmp_ln27_reg_1245_pp1_iter3_reg <= icmp_ln27_reg_1245_pp1_iter2_reg;
                icmp_ln27_reg_1245_pp1_iter4_reg <= icmp_ln27_reg_1245_pp1_iter3_reg;
                icmp_ln27_reg_1245_pp1_iter5_reg <= icmp_ln27_reg_1245_pp1_iter4_reg;
                icmp_ln935_reg_1276_pp1_iter2_reg <= icmp_ln935_reg_1276;
                icmp_ln935_reg_1276_pp1_iter3_reg <= icmp_ln935_reg_1276_pp1_iter2_reg;
                icmp_ln935_reg_1276_pp1_iter4_reg <= icmp_ln935_reg_1276_pp1_iter3_reg;
                p_Result_10_reg_1260_pp1_iter2_reg <= p_Result_10_reg_1260_pp1_iter1_reg;
                p_Result_10_reg_1260_pp1_iter3_reg <= p_Result_10_reg_1260_pp1_iter2_reg;
                p_Result_10_reg_1260_pp1_iter4_reg <= p_Result_10_reg_1260_pp1_iter3_reg;
                tmp_V_4_reg_1281_pp1_iter2_reg <= tmp_V_4_reg_1281;
                tmp_V_4_reg_1281_pp1_iter3_reg <= tmp_V_4_reg_1281_pp1_iter2_reg;
                trunc_ln943_reg_1294_pp1_iter2_reg <= trunc_ln943_reg_1294;
                trunc_ln943_reg_1294_pp1_iter3_reg <= trunc_ln943_reg_1294_pp1_iter2_reg;
                trunc_ln943_reg_1294_pp1_iter4_reg <= trunc_ln943_reg_1294_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1047_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln603_reg_1126 <= and_ln603_fu_461_p2;
                man_V_2_reg_1116 <= man_V_2_fu_367_p3;
                or_ln603_2_reg_1141 <= or_ln603_2_fu_487_p2;
                or_ln603_reg_1131 <= or_ln603_fu_467_p2;
                select_ln603_1_reg_1136 <= select_ln603_1_fu_473_p3;
                    shl_ln_reg_1146(12 downto 4) <= shl_ln_fu_493_p3(12 downto 4);
                trunc_ln583_reg_1121 <= trunc_ln583_fu_374_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1047_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    empty_34_reg_1161(12 downto 4) <= empty_34_fu_546_p2(12 downto 4);
                icmp_ln203_reg_1166 <= icmp_ln203_fu_551_p2;
                select_ln603_3_reg_1156 <= select_ln603_3_fu_539_p3;
                sub_ln203_1_reg_1178 <= sub_ln203_1_fu_568_p2;
                    sub_ln203_reg_1173(12 downto 4) <= sub_ln203_fu_556_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1047 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_tmp_V_reg_1077 <= ireg_V_fu_264_p1(62 downto 52);
                p_Result_8_reg_1072 <= ireg_V_fu_264_p1(63 downto 63);
                trunc_ln556_reg_1067 <= trunc_ln556_fu_268_p1;
                trunc_ln565_reg_1082 <= trunc_ln565_fu_290_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_0_reg_206_pp0_iter1_reg <= i_0_reg_206;
                icmp_ln19_reg_1047 <= icmp_ln19_fu_237_p2;
                icmp_ln19_reg_1047_pp0_iter1_reg <= icmp_ln19_reg_1047;
                in_data_tmp_reg_1056_pp0_iter1_reg <= in_data_tmp_reg_1056;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_0_reg_206_pp0_iter2_reg <= i_0_reg_206_pp0_iter1_reg;
                icmp_ln19_reg_1047_pp0_iter2_reg <= icmp_ln19_reg_1047_pp0_iter1_reg;
                icmp_ln19_reg_1047_pp0_iter3_reg <= icmp_ln19_reg_1047_pp0_iter2_reg;
                icmp_ln19_reg_1047_pp0_iter4_reg <= icmp_ln19_reg_1047_pp0_iter3_reg;
                icmp_ln19_reg_1047_pp0_iter5_reg <= icmp_ln19_reg_1047_pp0_iter4_reg;
                icmp_ln203_reg_1166_pp0_iter5_reg <= icmp_ln203_reg_1166;
                in_data_tmp_reg_1056_pp0_iter2_reg <= in_data_tmp_reg_1056_pp0_iter1_reg;
                p_Result_8_reg_1072_pp0_iter2_reg <= p_Result_8_reg_1072;
                sh_amt_reg_1099_pp0_iter3_reg <= sh_amt_reg_1099;
                    shl_ln_reg_1146_pp0_iter4_reg(12 downto 4) <= shl_ln_reg_1146(12 downto 4);
                trunc_ln565_reg_1082_pp0_iter2_reg <= trunc_ln565_reg_1082;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_1051 <= i_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1047_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln571_reg_1087 <= icmp_ln571_fu_297_p2;
                icmp_ln581_reg_1093 <= icmp_ln581_fu_308_p2;
                icmp_ln582_reg_1105 <= icmp_ln582_fu_334_p2;
                sh_amt_reg_1099 <= sh_amt_fu_326_p3;
                tmp_4_reg_1111 <= sh_amt_fu_326_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln935_reg_1276 <= icmp_ln935_fu_761_p2;
                l_reg_1289 <= l_fu_789_p3;
                tmp_V_4_reg_1281 <= tmp_V_4_fu_766_p3;
                trunc_ln943_reg_1294 <= trunc_ln943_fu_797_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_0_load_A = ap_const_logic_1)) then
                in_data_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_0_load_B = ap_const_logic_1)) then
                in_data_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_data_tmp_reg_1056 <= in_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_A = ap_const_logic_1)) then
                in_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_B = ap_const_logic_1)) then
                in_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1047_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                in_local_V_fu_172 <= in_local_V_1_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                is_last_reg_1062 <= is_last_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1276_pp1_iter3_reg = ap_const_lv1_0) and (icmp_ln27_reg_1245_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                m_5_reg_1351 <= m_2_fu_960_p2(63 downto 1);
                tmp_10_reg_1356 <= m_2_fu_960_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_1_load_A = ap_const_logic_1)) then
                out_data_1_payload_A <= select_ln935_fu_1032_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_1_load_B = ap_const_logic_1)) then
                out_data_1_payload_B <= select_ln935_fu_1032_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_A = ap_const_logic_1)) then
                out_last_V_1_payload_A <= and_ln30_reg_1271_pp1_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_B = ap_const_logic_1)) then
                out_last_V_1_payload_B <= and_ln30_reg_1271_pp1_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                out_local_1_reg_1200 <= grp_myproject_fu_229_ap_return_1;
                out_local_2_reg_1205 <= grp_myproject_fu_229_ap_return_2;
                out_local_3_reg_1210 <= grp_myproject_fu_229_ap_return_3;
                out_local_4_reg_1215 <= grp_myproject_fu_229_ap_return_4;
                out_local_5_reg_1220 <= grp_myproject_fu_229_ap_return_5;
                out_local_6_reg_1225 <= grp_myproject_fu_229_ap_return_6;
                out_local_7_reg_1230 <= grp_myproject_fu_229_ap_return_7;
                out_local_8_reg_1235 <= grp_myproject_fu_229_ap_return_8;
                out_local_9_reg_1240 <= grp_myproject_fu_229_ap_return_9;
                out_local_reg_1195 <= grp_myproject_fu_229_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1276 = ap_const_lv1_0) and (icmp_ln27_reg_1245_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sub_ln944_reg_1299 <= sub_ln944_fu_801_p2;
                trunc_ln944_reg_1306 <= trunc_ln944_fu_806_p1;
                trunc_ln947_reg_1311 <= trunc_ln947_fu_810_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1146(3 downto 0) <= "0000";
    shl_ln_reg_1146_pp0_iter4_reg(3 downto 0) <= "0000";
    empty_34_reg_1161(3 downto 0) <= "1111";
    sub_ln203_reg_1173(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (out_r_TREADY, out_data_1_state, out_last_V_1_state, ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln19_fu_237_p2, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, icmp_ln27_fu_707_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_CS_fsm_state33)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln19_fu_237_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln19_fu_237_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln27_fu_707_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln27_fu_707_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not(((out_last_V_1_state = ap_const_lv2_1) or (out_data_1_state = ap_const_lv2_1) or ((out_last_V_1_state = ap_const_lv2_3) and (out_r_TREADY = ap_const_logic_0)) or ((out_data_1_state = ap_const_lv2_3) and (out_r_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_294_p1));
    a_fu_882_p2 <= (icmp_ln947_reg_1321 and icmp_ln947_1_reg_1326);
    add_ln581_fu_314_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_302_p2));
    add_ln949_fu_861_p2 <= std_logic_vector(signed(ap_const_lv16_FFE8) + signed(trunc_ln944_reg_1306));
    add_ln958_fu_872_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_1299));
    add_ln964_fu_999_p2 <= std_logic_vector(unsigned(select_ln964_fu_987_p3) + unsigned(sub_ln964_fu_994_p2));
    and_ln203_1_fu_645_p2 <= (xor_ln203_fu_640_p2 and in_local_V_fu_172);
    and_ln203_2_fu_651_p2 <= (select_ln203_3_fu_634_p3 and and_ln203_reg_1189);
    and_ln203_fu_616_p2 <= (shl_ln203_1_fu_604_p2 and lshr_ln203_fu_610_p2);
    and_ln30_fu_755_p2 <= (is_last_0_reg_194 and icmp_ln30_fu_749_p2);
    and_ln581_fu_427_p2 <= (xor_ln582_fu_421_p2 and icmp_ln581_reg_1093);
    and_ln582_fu_412_p2 <= (xor_ln571_fu_407_p2 and icmp_ln582_reg_1105);
    and_ln585_1_fu_444_p2 <= (icmp_ln585_fu_378_p2 and and_ln581_fu_427_p2);
    and_ln585_fu_438_p2 <= (xor_ln585_fu_432_p2 and and_ln581_fu_427_p2);
    and_ln603_fu_461_p2 <= (xor_ln581_fu_455_p2 and icmp_ln603_fu_383_p2);
    and_ln949_fu_905_p2 <= (xor_ln949_fu_893_p2 and p_Result_5_fu_899_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(18);
    ap_CS_fsm_state33 <= ap_CS_fsm(20);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
    ap_NS_fsm_state9 <= ap_NS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_data_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln19_fu_237_p2)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_data_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln19_fu_237_p2)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_block_state31_io, ap_block_state32_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_block_state31_io, ap_block_state32_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)));
    end process;

        ap_block_state26_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_data_0_vld_out, icmp_ln19_fu_237_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state30_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_io_assign_proc : process(out_data_1_ack_in, icmp_ln27_reg_1245_pp1_iter4_reg)
    begin
                ap_block_state31_io <= ((icmp_ln27_reg_1245_pp1_iter4_reg = ap_const_lv1_0) and (out_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state31_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(out_data_1_ack_in, icmp_ln27_reg_1245_pp1_iter5_reg)
    begin
                ap_block_state32_io <= ((icmp_ln27_reg_1245_pp1_iter5_reg = ap_const_lv1_0) and (out_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state32_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_assign_proc : process(out_r_TREADY, out_data_1_state, out_last_V_1_state)
    begin
                ap_block_state33 <= ((out_last_V_1_state = ap_const_lv2_1) or (out_data_1_state = ap_const_lv2_1) or ((out_last_V_1_state = ap_const_lv2_3) and (out_r_TREADY = ap_const_logic_0)) or ((out_data_1_state = ap_const_lv2_3) and (out_r_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln19_fu_237_p2)
    begin
        if ((icmp_ln19_fu_237_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state26_assign_proc : process(icmp_ln27_fu_707_p2)
    begin
        if ((icmp_ln27_fu_707_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_210_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_0_reg_206, icmp_ln19_reg_1047, i_reg_1051, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln19_reg_1047 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_210_p4 <= i_reg_1051;
        else 
            ap_phi_mux_i_0_phi_fu_210_p4 <= i_0_reg_206;
        end if; 
    end process;


    ap_phi_mux_is_last_0_phi_fu_198_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, is_last_0_reg_194, icmp_ln19_reg_1047, is_last_reg_1062, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln19_reg_1047 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_is_last_0_phi_fu_198_p4 <= is_last_reg_1062;
        else 
            ap_phi_mux_is_last_0_phi_fu_198_p4 <= is_last_0_reg_194;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_fu_508_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1116),to_integer(unsigned('0' & zext_ln586_fu_504_p1(31-1 downto 0)))));
    bitcast_ln696_fu_388_p1 <= in_data_tmp_reg_1056_pp0_iter2_reg;
    bitcast_ln739_fu_1028_p1 <= trunc_ln738_fu_1024_p1;
    empty_34_fu_546_p2 <= (shl_ln_reg_1146 or ap_const_lv13_F);

    grp_fu_234_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_234_ce <= ap_const_logic_1;
        else 
            grp_fu_234_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_myproject_fu_229_ap_start <= grp_myproject_fu_229_ap_start_reg;
    i_1_fu_713_p2 <= std_logic_vector(unsigned(i2_0_reg_218) + unsigned(ap_const_lv4_1));
    i_fu_243_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_210_p4) + unsigned(ap_const_lv9_1));
    icmp_ln19_fu_237_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_210_p4 = ap_const_lv9_144) else "0";
    icmp_ln203_fu_551_p2 <= "1" when (unsigned(shl_ln_reg_1146) > unsigned(empty_34_fu_546_p2)) else "0";
    icmp_ln27_fu_707_p2 <= "1" when (i2_0_reg_218 = ap_const_lv4_A) else "0";
    icmp_ln30_fu_749_p2 <= "1" when (i2_0_reg_218 = ap_const_lv4_9) else "0";
    icmp_ln571_fu_297_p2 <= "1" when (trunc_ln556_reg_1067 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_308_p2 <= "1" when (signed(F2_fu_302_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_334_p2 <= "1" when (F2_fu_302_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_378_p2 <= "1" when (unsigned(sh_amt_reg_1099) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_383_p2 <= "1" when (tmp_4_reg_1111 = ap_const_lv8_0) else "0";
    icmp_ln935_fu_761_p2 <= "1" when (tmp_V_3_reg_1254 = ap_const_lv16_0) else "0";
    icmp_ln947_1_fu_855_p2 <= "0" when (p_Result_6_fu_850_p2 = ap_const_lv16_0) else "1";
    icmp_ln947_fu_829_p2 <= "1" when (signed(tmp_8_fu_819_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_866_p2 <= "1" when (signed(lsb_index_fu_814_p2) > signed(ap_const_lv32_0)) else "0";
    in_data_0_ack_in <= in_data_0_state(1);

    in_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln19_fu_237_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_0_ack_out <= ap_const_logic_1;
        else 
            in_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_0_data_out_assign_proc : process(in_data_0_payload_A, in_data_0_payload_B, in_data_0_sel)
    begin
        if ((in_data_0_sel = ap_const_logic_1)) then 
            in_data_0_data_out <= in_data_0_payload_B;
        else 
            in_data_0_data_out <= in_data_0_payload_A;
        end if; 
    end process;

    in_data_0_load_A <= (in_data_0_state_cmp_full and not(in_data_0_sel_wr));
    in_data_0_load_B <= (in_data_0_state_cmp_full and in_data_0_sel_wr);
    in_data_0_sel <= in_data_0_sel_rd;
    in_data_0_state_cmp_full <= '0' when (in_data_0_state = ap_const_lv2_1) else '1';
    in_data_0_vld_in <= in_r_TVALID;
    in_data_0_vld_out <= in_data_0_state(0);
    in_last_V_0_ack_in <= in_last_V_0_state(1);

    in_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln19_fu_237_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_last_V_0_data_out_assign_proc : process(in_last_V_0_payload_A, in_last_V_0_payload_B, in_last_V_0_sel)
    begin
        if ((in_last_V_0_sel = ap_const_logic_1)) then 
            in_last_V_0_data_out <= in_last_V_0_payload_B;
        else 
            in_last_V_0_data_out <= in_last_V_0_payload_A;
        end if; 
    end process;

    in_last_V_0_load_A <= (in_last_V_0_state_cmp_full and not(in_last_V_0_sel_wr));
    in_last_V_0_load_B <= (in_last_V_0_state_cmp_full and in_last_V_0_sel_wr);
    in_last_V_0_sel <= in_last_V_0_sel_rd;
    in_last_V_0_state_cmp_full <= '0' when (in_last_V_0_state = ap_const_lv2_1) else '1';
    in_last_V_0_vld_in <= in_r_TVALID;
    in_last_V_0_vld_out <= in_last_V_0_state(0);
    in_local_V_1_fu_656_p2 <= (and_ln203_2_fu_651_p2 or and_ln203_1_fu_645_p2);

    in_r_TDATA_blk_n_assign_proc : process(in_data_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln19_fu_237_p2)
    begin
        if (((icmp_ln19_fu_237_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_data_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_last_V_0_state(1);
    ireg_V_fu_264_p1 <= grp_fu_234_p1;
    is_last_fu_258_p2 <= (in_last_V_0_data_out or ap_phi_mux_is_last_0_phi_fu_198_p4);
    
    l_fu_789_p3_proc : process(p_Result_11_fu_781_p3)
    begin
        l_fu_789_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_11_fu_781_p3(i) = '1' then
                l_fu_789_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_814_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_1299));
    lshr_ln203_fu_610_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv5184_lc_2),to_integer(unsigned('0' & zext_ln203_3_fu_595_p1(31-1 downto 0)))));
    lshr_ln947_fu_844_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln947_fu_840_p1(16-1 downto 0)))));
    lshr_ln958_fu_931_p2 <= std_logic_vector(shift_right(unsigned(zext_ln957_1_fu_928_p1),to_integer(unsigned('0' & add_ln958_reg_1341(31-1 downto 0)))));
    m_1_fu_949_p3 <= 
        zext_ln958_fu_936_p1 when (icmp_ln958_reg_1336(0) = '1') else 
        shl_ln958_fu_943_p2;
    m_2_fu_960_p2 <= std_logic_vector(unsigned(m_1_fu_949_p3) + unsigned(zext_ln961_fu_956_p1));
    m_6_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_1351),64));
    m_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1281_pp1_iter3_reg),64));
    man_V_1_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_9_fu_357_p1));
    man_V_2_fu_367_p3 <= 
        man_V_1_fu_361_p2 when (p_Result_8_reg_1072_pp0_iter2_reg(0) = '1') else 
        p_Result_9_fu_357_p1;
    or_ln581_fu_450_p2 <= (or_ln582_fu_417_p2 or icmp_ln581_reg_1093);
    or_ln582_fu_417_p2 <= (icmp_ln582_reg_1105 or icmp_ln571_reg_1087);
    or_ln603_1_fu_481_p2 <= (and_ln585_fu_438_p2 or and_ln582_fu_412_p2);
    or_ln603_2_fu_487_p2 <= (or_ln603_fu_467_p2 or or_ln603_1_fu_481_p2);
    or_ln603_fu_467_p2 <= (and_ln603_fu_461_p2 or and_ln585_1_fu_444_p2);
    or_ln949_fu_911_p2 <= (and_ln949_fu_905_p2 or a_fu_882_p2);
    or_ln_fu_917_p3 <= (ap_const_lv31_0 & or_ln949_fu_911_p2);
    out_data_1_ack_in <= out_data_1_state(1);
    out_data_1_ack_out <= out_r_TREADY;

    out_data_1_data_out_assign_proc : process(out_data_1_payload_A, out_data_1_payload_B, out_data_1_sel)
    begin
        if ((out_data_1_sel = ap_const_logic_1)) then 
            out_data_1_data_out <= out_data_1_payload_B;
        else 
            out_data_1_data_out <= out_data_1_payload_A;
        end if; 
    end process;

    out_data_1_load_A <= (out_data_1_state_cmp_full and not(out_data_1_sel_wr));
    out_data_1_load_B <= (out_data_1_state_cmp_full and out_data_1_sel_wr);
    out_data_1_sel <= out_data_1_sel_rd;
    out_data_1_state_cmp_full <= '0' when (out_data_1_state = ap_const_lv2_1) else '1';

    out_data_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter5, icmp_ln27_reg_1245_pp1_iter4_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln27_reg_1245_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            out_data_1_vld_in <= ap_const_logic_1;
        else 
            out_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_1_vld_out <= out_data_1_state(0);
    out_last_V_1_ack_in <= out_last_V_1_state(1);
    out_last_V_1_ack_out <= out_r_TREADY;

    out_last_V_1_data_out_assign_proc : process(out_last_V_1_payload_A, out_last_V_1_payload_B, out_last_V_1_sel)
    begin
        if ((out_last_V_1_sel = ap_const_logic_1)) then 
            out_last_V_1_data_out <= out_last_V_1_payload_B;
        else 
            out_last_V_1_data_out <= out_last_V_1_payload_A;
        end if; 
    end process;

    out_last_V_1_load_A <= (out_last_V_1_state_cmp_full and not(out_last_V_1_sel_wr));
    out_last_V_1_load_B <= (out_last_V_1_state_cmp_full and out_last_V_1_sel_wr);
    out_last_V_1_sel <= out_last_V_1_sel_rd;
    out_last_V_1_state_cmp_full <= '0' when (out_last_V_1_state = ap_const_lv2_1) else '1';

    out_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter5, icmp_ln27_reg_1245_pp1_iter4_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln27_reg_1245_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            out_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_1_vld_out <= out_last_V_1_state(0);
    out_r_TDATA <= out_data_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_data_1_state, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, icmp_ln27_reg_1245_pp1_iter4_reg, ap_enable_reg_pp1_iter6, icmp_ln27_reg_1245_pp1_iter5_reg)
    begin
        if ((((icmp_ln27_reg_1245_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)) or ((icmp_ln27_reg_1245_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)))) then 
            out_r_TDATA_blk_n <= out_data_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST <= out_last_V_1_data_out;
    out_r_TVALID <= out_last_V_1_state(0);
    p_Result_11_fu_781_p3 <= (ap_const_lv16_FFFF & p_Result_s_fu_771_p4);
    p_Result_12_fu_1012_p5 <= (m_6_fu_984_p1(63 downto 32) & tmp_2_fu_1005_p3 & m_6_fu_984_p1(22 downto 0));
    p_Result_5_fu_899_p3 <= tmp_V_4_reg_1281_pp1_iter3_reg(to_integer(unsigned(add_ln949_reg_1331)) downto to_integer(unsigned(add_ln949_reg_1331))) when (to_integer(unsigned(add_ln949_reg_1331))>= 0 and to_integer(unsigned(add_ln949_reg_1331))<=15) else "-";
    p_Result_6_fu_850_p2 <= (tmp_V_4_reg_1281_pp1_iter2_reg and lshr_ln947_fu_844_p2);
    p_Result_9_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_350_p3),54));
    
    p_Result_s_fu_771_p4_proc : process(tmp_V_4_fu_766_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_771_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_766_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_771_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_771_p4_i) := tmp_V_4_fu_766_p3(16-1-p_Result_s_fu_771_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_771_p4 <= resvalue(16-1 downto 0);
    end process;

    select_ln203_1_fu_577_p3 <= 
        empty_34_reg_1161 when (icmp_ln203_reg_1166(0) = '1') else 
        shl_ln_reg_1146_pp0_iter4_reg;
    select_ln203_2_fu_582_p3 <= 
        sub_ln203_reg_1173 when (icmp_ln203_reg_1166(0) = '1') else 
        shl_ln_reg_1146_pp0_iter4_reg;
    select_ln203_3_fu_634_p3 <= 
        tmp_6_fu_625_p4 when (icmp_ln203_reg_1166_pp0_iter5_reg(0) = '1') else 
        shl_ln203_reg_1183;
    select_ln203_fu_561_p3 <= 
        shl_ln_reg_1146 when (icmp_ln203_fu_551_p2(0) = '1') else 
        empty_34_fu_546_p2;
    select_ln588_fu_399_p3 <= 
        ap_const_lv16_FFFF when (tmp_5_fu_391_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_1_fu_473_p3 <= 
        select_ln588_fu_399_p3 when (and_ln585_fu_438_p2(0) = '1') else 
        trunc_ln583_fu_374_p1;
    select_ln603_2_fu_533_p3 <= 
        select_ln603_fu_526_p3 when (or_ln603_reg_1131(0) = '1') else 
        select_ln603_1_reg_1136;
    select_ln603_3_fu_539_p3 <= 
        select_ln603_2_fu_533_p3 when (or_ln603_2_reg_1141(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_fu_526_p3 <= 
        shl_ln604_fu_521_p2 when (and_ln603_reg_1126(0) = '1') else 
        trunc_ln586_fu_513_p1;
    select_ln935_fu_1032_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1276_pp1_iter4_reg(0) = '1') else 
        bitcast_ln739_fu_1028_p1;
    select_ln964_fu_987_p3 <= 
        ap_const_lv8_7F when (tmp_10_reg_1356(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln581_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1099_pp0_iter3_reg),32));

    sext_ln581cast_fu_517_p1 <= sext_ln581_fu_501_p1(16 - 1 downto 0);
    sh_amt_fu_326_p3 <= 
        add_ln581_fu_314_p2 when (icmp_ln581_fu_308_p2(0) = '1') else 
        sub_ln581_fu_320_p2;
    shl_ln203_1_fu_604_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv5184_lc_2),to_integer(unsigned('0' & zext_ln203_2_fu_591_p1(31-1 downto 0)))));
    shl_ln203_fu_598_p2 <= std_logic_vector(shift_left(unsigned(zext_ln203_fu_574_p1),to_integer(unsigned('0' & zext_ln203_1_fu_587_p1(31-1 downto 0)))));
    shl_ln604_fu_521_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1121),to_integer(unsigned('0' & sext_ln581cast_fu_517_p1(16-1 downto 0)))));
    shl_ln958_fu_943_p2 <= std_logic_vector(shift_left(unsigned(m_fu_925_p1),to_integer(unsigned('0' & zext_ln958_1_fu_940_p1(31-1 downto 0)))));
    shl_ln_fu_493_p3 <= (i_0_reg_206_pp0_iter2_reg & ap_const_lv4_0);
    sub_ln203_1_fu_568_p2 <= std_logic_vector(signed(ap_const_lv13_143F) - signed(select_ln203_fu_561_p3));
    sub_ln203_fu_556_p2 <= std_logic_vector(signed(ap_const_lv13_143F) - signed(shl_ln_reg_1146));
    sub_ln581_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_302_p2));
    sub_ln944_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_reg_1289));
    sub_ln947_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln947_reg_1311));
    sub_ln958_fu_877_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1299));
    sub_ln964_fu_994_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln943_reg_1294_pp1_iter4_reg));
    tmp_2_fu_1005_p3 <= (p_Result_10_reg_1260_pp1_iter4_reg & add_ln964_fu_999_p2);
    tmp_5_fu_391_p3 <= bitcast_ln696_fu_388_p1(31 downto 31);
    
    tmp_6_fu_625_p4_proc : process(shl_ln203_reg_1183)
    variable vlo_cpy : STD_LOGIC_VECTOR(5184+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(5184+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(5184 - 1 downto 0);
    variable tmp_6_fu_625_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(5184 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(5184 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(5184 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(13 - 1 downto 0) := ap_const_lv32_143F(13 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(13 - 1 downto 0) := ap_const_lv32_0(13 - 1 downto 0);
        v0_cpy := shl_ln203_reg_1183;
        if (vlo_cpy(13 - 1 downto 0) > vhi_cpy(13 - 1 downto 0)) then
            vhi_cpy(13-1 downto 0) := std_logic_vector(5184-1-unsigned(ap_const_lv32_0(13-1 downto 0)));
            vlo_cpy(13-1 downto 0) := std_logic_vector(5184-1-unsigned(ap_const_lv32_143F(13-1 downto 0)));
            for tmp_6_fu_625_p4_i in 0 to 5184-1 loop
                v0_cpy(tmp_6_fu_625_p4_i) := shl_ln203_reg_1183(5184-1-tmp_6_fu_625_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(13-1 downto 0)))));

        section := (others=>'0');
        section(13-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(13-1 downto 0)) - unsigned(vlo_cpy(13-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(5184-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_625_p4 <= resvalue(5184-1 downto 0);
    end process;

    tmp_8_fu_819_p4 <= lsb_index_fu_814_p2(31 downto 1);
    tmp_9_fu_886_p3 <= lsb_index_reg_1316(31 downto 31);
    tmp_V_4_fu_766_p3 <= 
        tmp_V_reg_1266 when (p_Result_10_reg_1260(0) = '1') else 
        tmp_V_3_reg_1254;
    tmp_V_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_3_fu_719_p12));
    tmp_s_fu_350_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1082_pp0_iter2_reg);
    trunc_ln556_fu_268_p1 <= ireg_V_fu_264_p1(63 - 1 downto 0);
    trunc_ln565_fu_290_p1 <= ireg_V_fu_264_p1(52 - 1 downto 0);
    trunc_ln583_fu_374_p1 <= man_V_2_fu_367_p3(16 - 1 downto 0);
    trunc_ln586_fu_513_p1 <= ashr_ln586_fu_508_p2(16 - 1 downto 0);
    trunc_ln738_fu_1024_p1 <= p_Result_12_fu_1012_p5(32 - 1 downto 0);
    trunc_ln943_fu_797_p1 <= l_fu_789_p3(8 - 1 downto 0);
    trunc_ln944_fu_806_p1 <= sub_ln944_fu_801_p2(16 - 1 downto 0);
    trunc_ln947_fu_810_p1 <= sub_ln944_fu_801_p2(5 - 1 downto 0);
    xor_ln203_fu_640_p2 <= (ap_const_lv5184_lc_2 xor and_ln203_reg_1189);
    xor_ln571_fu_407_p2 <= (icmp_ln571_reg_1087 xor ap_const_lv1_1);
    xor_ln581_fu_455_p2 <= (or_ln581_fu_450_p2 xor ap_const_lv1_1);
    xor_ln582_fu_421_p2 <= (or_ln582_fu_417_p2 xor ap_const_lv1_1);
    xor_ln585_fu_432_p2 <= (icmp_ln585_fu_378_p2 xor ap_const_lv1_1);
    xor_ln949_fu_893_p2 <= (tmp_9_fu_886_p3 xor ap_const_lv1_1);
    zext_ln203_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_2_fu_582_p3),5184));
    zext_ln203_2_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_1_fu_577_p3),5184));
    zext_ln203_3_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln203_1_reg_1178),5184));
    zext_ln203_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln603_3_reg_1156),5184));
    zext_ln461_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1077),12));
    zext_ln586_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_501_p1),54));
    zext_ln947_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_835_p2),16));
    zext_ln957_1_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1281_pp1_iter3_reg),32));
    zext_ln958_1_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_reg_1346),64));
    zext_ln958_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_fu_931_p2),64));
    zext_ln961_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_917_p3),64));
end behav;
